// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// train
DataFrame train(const StringVector& training_files, int concrete_particles, int max_implicit_particles, int max_em_iter, int max_lbfgs_iter, int seed, double tol, bool use_spf, bool parallelize);
RcppExport SEXP _sgmwsmcpp_train(SEXP training_filesSEXP, SEXP concrete_particlesSEXP, SEXP max_implicit_particlesSEXP, SEXP max_em_iterSEXP, SEXP max_lbfgs_iterSEXP, SEXP seedSEXP, SEXP tolSEXP, SEXP use_spfSEXP, SEXP parallelizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const StringVector& >::type training_files(training_filesSEXP);
    Rcpp::traits::input_parameter< int >::type concrete_particles(concrete_particlesSEXP);
    Rcpp::traits::input_parameter< int >::type max_implicit_particles(max_implicit_particlesSEXP);
    Rcpp::traits::input_parameter< int >::type max_em_iter(max_em_iterSEXP);
    Rcpp::traits::input_parameter< int >::type max_lbfgs_iter(max_lbfgs_iterSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type use_spf(use_spfSEXP);
    Rcpp::traits::input_parameter< bool >::type parallelize(parallelizeSEXP);
    rcpp_result_gen = Rcpp::wrap(train(training_files, concrete_particles, max_implicit_particles, max_em_iter, max_lbfgs_iter, seed, tol, use_spf, parallelize));
    return rcpp_result_gen;
END_RCPP
}
// predict_internal
DataFrame predict_internal(const StringVector& test_files, const StringVector& types, const StringVector& features, const NumericVector& values, int target_ess, int seed, bool use_spf, bool parallelize);
RcppExport SEXP _sgmwsmcpp_predict_internal(SEXP test_filesSEXP, SEXP typesSEXP, SEXP featuresSEXP, SEXP valuesSEXP, SEXP target_essSEXP, SEXP seedSEXP, SEXP use_spfSEXP, SEXP parallelizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const StringVector& >::type test_files(test_filesSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type features(featuresSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< int >::type target_ess(target_essSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type use_spf(use_spfSEXP);
    Rcpp::traits::input_parameter< bool >::type parallelize(parallelizeSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_internal(test_files, types, features, values, target_ess, seed, use_spf, parallelize));
    return rcpp_result_gen;
END_RCPP
}
// train_and_predict
DataFrame train_and_predict(const StringVector& training_files, const StringVector& test_files, int concrete_particles, int max_implicit_particles, int target_ess, int max_em_iter, int max_lbfgs_iter, int seed, double tol, bool use_spf, bool parallelize);
RcppExport SEXP _sgmwsmcpp_train_and_predict(SEXP training_filesSEXP, SEXP test_filesSEXP, SEXP concrete_particlesSEXP, SEXP max_implicit_particlesSEXP, SEXP target_essSEXP, SEXP max_em_iterSEXP, SEXP max_lbfgs_iterSEXP, SEXP seedSEXP, SEXP tolSEXP, SEXP use_spfSEXP, SEXP parallelizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const StringVector& >::type training_files(training_filesSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type test_files(test_filesSEXP);
    Rcpp::traits::input_parameter< int >::type concrete_particles(concrete_particlesSEXP);
    Rcpp::traits::input_parameter< int >::type max_implicit_particles(max_implicit_particlesSEXP);
    Rcpp::traits::input_parameter< int >::type target_ess(target_essSEXP);
    Rcpp::traits::input_parameter< int >::type max_em_iter(max_em_iterSEXP);
    Rcpp::traits::input_parameter< int >::type max_lbfgs_iter(max_lbfgs_iterSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type use_spf(use_spfSEXP);
    Rcpp::traits::input_parameter< bool >::type parallelize(parallelizeSEXP);
    rcpp_result_gen = Rcpp::wrap(train_and_predict(training_files, test_files, concrete_particles, max_implicit_particles, target_ess, max_em_iter, max_lbfgs_iter, seed, tol, use_spf, parallelize));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sgmwsmcpp_train", (DL_FUNC) &_sgmwsmcpp_train, 9},
    {"_sgmwsmcpp_predict_internal", (DL_FUNC) &_sgmwsmcpp_predict_internal, 8},
    {"_sgmwsmcpp_train_and_predict", (DL_FUNC) &_sgmwsmcpp_train_and_predict, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_sgmwsmcpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
